import tkinter as tk
import random

GRID_SIZE = 4
WINNING_TILE = 2048

class Game2048:
    def __init__(self, master):
        self.master = master
        self.master.title("2048 Game")
        self.game_over = False
        self.score = 0

        self.grid = [[0] * GRID_SIZE for _ in range(GRID_SIZE)]
        self.colors = {0: "#cdc1b4", 2: "#eee4da", 4: "#ede0c8", 8: "#f2b179",
                       16: "#f59563", 32: "#f67c5f", 64: "#f65e3b", 128: "#edcf72",
                       256: "#edcc61", 512: "#edc850", 1024: "#edc53f", 2048: "#edc22e"}
        self.text_colors = {2: "#776e65", 4: "#776e65", 8: "#f9f6f2", 16: "#f9f6f2", 
                            32: "#f9f6f2", 64: "#f9f6f2", 128: "#f9f6f2", 256: "#f9f6f2", 
                            512: "#f9f6f2", 1024: "#f9f6f2", 2048: "#f9f6f2"}

        self.init_game()
        self.create_grid()

        self.master.bind("<Up>", self.move_up)
        self.master.bind("<Down>", self.move_down)
        self.master.bind("<Left>", self.move_left)
        self.master.bind("<Right>", self.move_right)

    def init_game(self):
        self.add_random_tile()
        self.add_random_tile()

    def create_grid(self):
        self.canvas = tk.Canvas(self.master, bg="#bbada0", width=400, height=400)
        self.canvas.pack()

        self.tiles = []
        for i in range(GRID_SIZE):
            row = []
            for j in range(GRID_SIZE):
                tile = self.canvas.create_rectangle(
                    10 + j * 100, 10 + i * 100, 110 + j * 100, 110 + i * 100,
                    fill=self.colors[0], outline="#bbada0"
                )
                row.append(tile)
            self.tiles.append(row)

        self.update_grid()

    def update_grid(self):
        self.canvas.delete("tile_text")  # Clear previous text
        for i in range(GRID_SIZE):
            for j in range(GRID_SIZE):
                tile_value = self.grid[i][j]
                self.canvas.itemconfig(self.tiles[i][j], fill=self.colors.get(tile_value, "#3c3a32"))
                if tile_value > 0:
                    text_color = self.text_colors.get(tile_value, "white")
                    self.canvas.create_text(60 + j * 100, 60 + i * 100, text=str(tile_value),
                                            fill=text_color, font=("Helvetica", 24, "bold"), tags="tile_text")

    def add_random_tile(self):
        empty_cells = [(i, j) for i in range(GRID_SIZE) for j in range(GRID_SIZE) if self.grid[i][j] == 0]
        if empty_cells:
            i, j = random.choice(empty_cells)
            self.grid[i][j] = random.choice([2, 4])

    def slide_and_merge(self, row):
        """Slide non-zero tiles to the front and merge if adjacent tiles are the same."""
        # Slide non-zero tiles
        new_row = [i for i in row if i != 0]
        
        # Merge adjacent tiles if they are the same
        for i in range(len(new_row) - 1):
            if new_row[i] == new_row[i + 1]:
                new_row[i] *= 2
                self.score += new_row[i]
                new_row[i + 1] = 0

        # Remove the zeros added during the merge and return the final row
        new_row = [i for i in new_row if i != 0]
        new_row.extend([0] * (GRID_SIZE - len(new_row)))
        return new_row

    def move_left(self, event):
        moved = False
        for i in range(GRID_SIZE):
            new_row = self.slide_and_merge(self.grid[i])
            if new_row != self.grid[i]:
                self.grid[i] = new_row
                moved = True
        if moved:
            self.after_move()

    def move_right(self, event):
        moved = False
        for i in range(GRID_SIZE):
            new_row = self.slide_and_merge(self.grid[i][::-1])[::-1]  # Reverse the row, move, then reverse back
            if new_row != self.grid[i]:
                self.grid[i] = new_row
                moved = True
        if moved:
            self.after_move()

    def move_up(self, event):
        moved = False
        self.rotate_grid(clockwise=False)
        for i in range(GRID_SIZE):
            new_row = self.slide_and_merge(self.grid[i])
            if new_row != self.grid[i]:
                self.grid[i] = new_row
                moved = True
        self.rotate_grid(clockwise=True)
        if moved:
            self.after_move()

    def move_down(self, event):
        moved = False
        self.rotate_grid(clockwise=True)
        for i in range(GRID_SIZE):
            new_row = self.slide_and_merge(self.grid[i])
            if new_row != self.grid[i]:
                self.grid[i] = new_row
                moved = True
        self.rotate_grid(clockwise=False)
        if moved:
            self.after_move()

    def rotate_grid(self, clockwise=True):
        """Rotate the grid 90 degrees clockwise or counter-clockwise."""
        if clockwise:
            self.grid = [list(row) for row in zip(*self.grid[::-1])]
        else:
            self.grid = [list(row[::-1]) for row in zip(*self.grid)]

    def after_move(self):
        self.add_random_tile()
        self.update_grid()
        if self.check_win():
            self.game_over_popup(win=True)
        elif self.check_game_over():
            self.game_over_popup()

    def check_win(self):
        # Check if the player has won by reaching the winning tile (2048)
        for row in self.grid:
            if WINNING_TILE in row:
                return True
        return False

    def check_game_over(self):
        # Check if there are any available moves
        for i in range(GRID_SIZE):
            for j in range(GRID_SIZE):
                if self.grid[i][j] == 0:
                    return False
                if j < GRID_SIZE - 1 and self.grid[i][j] == self.grid[i][j + 1]:
                    return False
                if i < GRID_SIZE - 1 and self.grid[i][j] == self.grid[i + 1][j]:
                    return False
        return True

    def game_over_popup(self, win=False):
        self.game_over = True
        popup = tk.Toplevel(self.master)
        popup.title("You Win!" if win else "Game Over")
        label_text = "You Win!" if win else "Game Over!"
        label = tk.Label(popup, text=label_text, font=("Helvetica", 24, "bold"))
        label.pack(pady=20)
        close_button = tk.Button(popup, text="Close", command=self.master.quit)
        close_button.pack(pady=10)

if __name__ == "__main__":
    root = tk.Tk()
    game = Game2048(root)
    root.mainloop()
